---
# not really installing anything, but you get the point...
- name: install| find the next available UID
  shell: "getent passwd | awk -F: '($3>600) && ($3<10000) && ($3>maxuid) { maxuid=$3; } END { print maxuid+1; }'"
  register: next_uid

- name: install| if a uid was passed, we need to do some stuff
  block:
    - name: install| see if {{ user.uid }} is in use
      shell: "getent passwd | awk -F: '$3 == {{ user.uid }} {print $1;exit}'"
      register: used_by
      changed_when: used_by.stdout != ""

    - name: install| if the uid is in use, kill processes by owner and modify
      block:
        - name: install| kill all open processes owned by {{ used_by.stdout }}
          become: true
          shell: pkill -9 -u {{ used_by.stdout }}
          register: pkill
          failed_when: pkill.stderr != ""
        - name: install| change {{ used_by.stdout }} to {{ next_uid.stdout }}
          become: true
          user:
            name: "{{ used_by.stdout }}"
            uid:  "{{ next_uid.stdout }}"
        - name: install| change the GID also
          become: true
          group:
            name: "{{ used_by.stdout }}"
            gid:  "{{ next_uid.stdout }}"
      when: used_by is changed
  when: user.uid is defined

- name: install| add local user {{ user.username }}
  become: true
  user:
    name: "{{ user.username }}"
    password: "{{ user.username |password_hash('sha512') }}"
    comment: "{{ user.fullname | default(user.username) }}"
    uid: "{{ user.uid | default(next_uid.stdout) }}"
    update_password: on_create

- name: install| grant {{ user.username }} sudo access
  become: true
  lineinfile:
    path: /etc/sudoers.d/{{ user.username }}
    state: present
    create: true
    regexp: '{{ user.username }}'
    line: '{{ user.username }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  when: 
    - user.sudoer is defined
    - user.sudoer

- name: install| create directories for {{ user.username }}
  become: true
  file:
    name: /home/{{ user.username }}/{{ item }}
    state: directory
    owner: '{{ user.username }}'
    group: '{{ user.username }}'
    mode: 'u=rwx,go='
  with_items:
    - "{{ user.create_dirs }}"
  when: 
    - user.create_dirs is defined
    - user.create_dirs != ""
